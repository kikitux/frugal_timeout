#!/usr/bin/ruby

$LOAD_PATH << './lib'
require './lib/frugal_timeout'

Thread.abort_on_exception = true
FrugalTimeout.dropin!

def recursive_timeout n, delay
  start = FrugalTimeout::MonotonicTime.now
  timeout(delay) {
    if n > 1
      recursive_timeout n -= 1, delay
    else
      sleep
    end
  }
rescue FrugalTimeout::Error
  finish = FrugalTimeout::MonotonicTime.now 
  @m.synchronize { @ar << finish - start }
end

THREAD_COUNT, TIMES = 150, 100
@ar, @m = [], Mutex.new
THREAD_COUNT.times {
  Thread.new {
    recursive_timeout TIMES, 1
  }
}
sleep 0.1 until @m.synchronize { @ar.size == THREAD_COUNT }

puts "#{THREAD_COUNT*TIMES} calls\navg: #{@ar.inject(:+)/@ar.size}"
